{"componentChunkName":"component---src-templates-blog-template-js","path":"/vue/vue04/","result":{"data":{"cur":{"id":"d89b38de-90b8-5ba9-beda-b5cc829be292","html":"<h2 id=\"vuex\" style=\"position:relative;\"><a href=\"#vuex\" aria-label=\"vuex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vuex</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install vuex@next --save</code></pre></div>\n<p>데이터들을 한곳에 몰아넣고 사용함.\r\n리액트로따지면 리덕스,리코일 등등 같음</p>\n<p>단점으로는 코드가 길어질 수 있고, 간단한 수정기능을 만드는데도 코드가 되게 길어짐</p>\n<p>그래서 데이터 관리를 많이 안하는 웹이면 <code class=\"language-text\">Vuex를</code>를 사용하고,\r\n간단한 웹은 <code class=\"language-text\">mitt</code>를 사용하자!</p>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<p>src/store.js (store라고 작명하는게 보통 관습임)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">// state를 저장하고싶으면 여기에,</span>\r\n      <span class=\"token comment\">//ex)</span>\r\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></code></pre></div>\n<p>src/main.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">'mitt'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>emitter <span class=\"token operator\">=</span> emitter<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 전 게시글 mitt사용법의 main.js와 연동되어있다.\r\n달라진점은 import store와, <code class=\"language-text\">app.use(store).</code>밖에없다.</p>\n<p>여기까지 세팅해주면 모든 컴포넌트에서 데이터(state)를 사용할 수 있다.\r\n완전 리액트 리덕스같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 안녕 kim이 출력된다.</span>\r\n<span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">></span>안녕 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> $store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">></span></code></pre></div>\n<p>state를 이런식으로 바로 변경도 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">></span>안녕 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> $store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"$store.state.name = '박'\"</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\r\n  <span class=\"token comment\">// 버튼 누르면 안녕 박 출력됨</span></code></pre></div>\n<p>근데 Vuex법칙중 하나가, 데이터를 직접 수정하면 안된다고한다.\r\n데이터 추적이 어렵기때문에(리덕스도 그랬음)</p>\n<h2 id=\"state-수정하는-법\" style=\"position:relative;\"><a href=\"#state-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"state 수정하는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State 수정하는 법</h2>\n<p>Vuex의 데이터를 수정하려면 다음과 같은 방법을 따르면된다.</p>\n<ol>\n<li>store.js에 state수정 방법을 정의하고(mutations사용),</li>\n<li>store.js에 부탁하자. ($store.commit(”) 사용)\r\n<br/></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n  <span class=\"token comment\">// 수정방법 정의하는 곳</span>\r\n  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">nameChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 사용</span>\r\n<span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">></span>안녕 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> $store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"$store.commit('nameChange', 'park')\"</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#vuex\">Vuex</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9\">사용</a></li>\n<li><a href=\"#state-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B2%95\">State 수정하는 법</a></li>\n</ul>\n</div>","excerpt":"Vuex 데이터들을 한곳에 몰아넣고 사용함.\r\n리액트로따지면 리덕스,리코일 등등 같음 단점으로는 코드가 길어질 수 있고, 간단한 수정기능을 만드는데도 코드가 되게 길어짐 그래서 데이터 관리를 많이 안하는 웹이면 를 사용하고,\r\n간단한 웹은 를 사용하자! 사용 src/store.js (store라고 작명하는게 보통 관습임) src/main.js 참고로 전 게시글 mitt사용법의 main.js와 연동되어있다.\r\n달라진점은 import store와, 밖에없다. 여기까지 세팅해주면 모든 컴포넌트에서 데이터(state)를 사용할 수 있다.\r\n완전 리액트 리덕스같다. state를 이런식으로 바로 변경도 가능하다 근데 Vuex법칙중 하나가, 데이터를 직접 수정하면 안된다고한다.\r\n데이터 추적이 어렵기때문에(리덕스도 그랬음) State 수정하는 법 Vuex의 데이터를 수정하려면 다음과 같은 방법을 따르면된다. store.js에 state수정 방법을 정의하고(mutations사용), store.j…","frontmatter":{"date":"January 01, 2023","title":"Vuex","categories":"vue","author":"정중식","emoji":"✍"},"fields":{"slug":"/vue/vue04/"}},"next":{"id":"9226e84a-499b-541c-b90f-1520e7898b3a","html":"<h2 id=\"vue에는-computed와-methods가-존재한다-어떤-차이점이있을까\" style=\"position:relative;\"><a href=\"#vue%EC%97%90%EB%8A%94-computed%EC%99%80-methods%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"vue에는 computed와 methods가 존재한다 어떤 차이점이있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vue에는 computed()와, methods()가 존재한다. 어떤 차이점이있을까?</h2>\n<ul>\n<li>\n<p>computed 함수는 사용해도 실행되지않는다. 처음 실행하고 값을 간직한다.(캐싱같은거같음,줄로 계산결과 저장용 함수로 사용함)<br/></p>\n<p>computed함수는 이름만 사용해서 불러와야한다. 소괄호() 사용을하면 안된다.<br/>\r\n예를들면 이렇게</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> computed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>methods함수는 사용할 때마다 실행된다.\r\n<br/></p>\n</li>\n</ul>\n<h2 id=\"mapstate\" style=\"position:relative;\"><a href=\"#mapstate\" aria-label=\"mapstate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mapState</h2>\n<p>state 꺼내쓰는 코드가 짧아진다! <br/></p>\n<p>computed:{}안에 작성하는게 일반적이다!</p>\n<p>예를들면 이렇게..</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Container <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>중요한점은,<br/>\r\ncomputed함수는 꼭 <code class=\"language-text\">return</code>을 적어줘야한다.</p>\n<p>축약 또한 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>mapState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Container <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* name() {\r\n      return this.$store.state.name;\r\n    }, */</span><span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 내가 가져오고싶은 vuex Store안의 state들을 적어주면 사용가능 */</span><span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">작명</span><span class=\"token operator\">:</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이런식으로도 가능함</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p>출처: 코딩애플</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#vue%EC%97%90%EB%8A%94-computed%EC%99%80-methods%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4%EC%9E%88%EC%9D%84%EA%B9%8C\">vue에는 computed()와, methods()가 존재한다. 어떤 차이점이있을까?</a></li>\n<li><a href=\"#mapstate\">mapState</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 01, 2023","title":"computed , mapState","categories":"vue","author":"정중식","emoji":"✍"},"fields":{"slug":"/vue/vue06/"}},"prev":{"id":"fa7397df-b906-5dd4-8ca7-4ce6770a6a30","html":"<h2 id=\"npm-i-mitt\" style=\"position:relative;\"><a href=\"#npm-i-mitt\" aria-label=\"npm i mitt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm i mitt</h2>\n<p><code class=\"language-text\">npm i mitt</code></p>\n<p>라이브러리니깐\r\n터미널로 설치해주자.</p>\n<p>Vuex의 개념까지 알고 다시와봤는데, mitt는 리액트로따지면 contextAPI같은거라고 생각함</p>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<ul>\n<li>main.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">'mitt'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>emitter <span class=\"token operator\">=</span> emitter<span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">app.config.globalProperties</code>는 글로벌한 변수 보관함이라고 생각하자.</p>\n<p>모든 컴포넌트에서 자주 사용하는 라이브러리가있다면 등록해서 사용할 수있다.\r\n예를들면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">'mitt'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>emitter <span class=\"token operator\">=</span> emitter<span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 해주면\r\nimport axios 해 올 필요 없이 this.axios로 사용이 가능해진다.</p>\n<p>mitt라이브러리로 데이터를 전송할 때 다음과 같이 두가지만 기억하면된다.<br/></p>\n<ol>\n<li>this.emitter.emit()로 전송하고,</li>\n<li>this.emitter.on()으로 수신한다.</li>\n</ol>\n<p>이제 본격적으로 mitt라이브러리를 사용해서 컴포넌트간 데이터를 전송해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span>div\r\n    @click<span class=\"token operator\">=</span><span class=\"token string\">\"fire\"</span>\r\n  <span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\r\n\r\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'FilterBox'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'작명'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'데이터'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\r\n\r\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\r\n<span class=\"token operator\">...</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">this.emitter.emit('작명','데이터')</code> 이런식으로 데이터를 쏴주고,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\r\n <span class=\"token operator\">...</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\r\n\r\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\r\n\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n     <span class=\"token operator\">...</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'작명'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\r\n\r\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\r\n<span class=\"token operator\">...</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\r\n</code></pre></div>\n<p><code class=\"language-text\">this.emitter.on()</code>으로 데이터를 수신해주면 된다.\r\n중요한건 항상 mounted(){}안에서 사용해줘야한다.</p>\n<p>그리고 개인적인 생각인데</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'작명'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이거 말고</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'작명'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 사용해주는 이유는..<br>\n크게 상관은없지만 자바스크립트의 this때문이 아닌가 싶다.\r\n()=>{}의 this는 함수 바깥의 데이터를 가르키고,\r\nfunction(){}의 this는 함수 안쪽의 데이터를 가르키기 때문이지않을까..</p>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<p>데이터를 전송할때의 name도 겹치게되면 안되고 하기때문에\r\n많이 사용하게되면 관리하는게 힘들어진다.</p>\n<p>대체품으로는: Vuex가 있다고한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#npm-i-mitt\">npm i mitt</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9\">사용</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 01, 2023","title":"mitt - 컴포넌트간 데이터 전송","categories":"vue","author":"정중식","emoji":"✍"},"fields":{"slug":"/vue/vue03/"}},"site":{"siteMetadata":{"siteUrl":"https://jungsikjeong.github.io","comments":{"utterances":{"repo":"jungsikjeong/jungsikjeong.github.io"}}}}},"pageContext":{"slug":"/vue/vue04/","nextSlug":"/vue/vue06/","prevSlug":"/vue/vue03/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}