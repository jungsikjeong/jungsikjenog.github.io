{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/etc","result":{"pageContext":{"currentCategory":"etc","categories":["All","etc","next.js","React","stepByStep","javascript","vue","TIL","css","mui"],"edges":[{"node":{"id":"c2460c3c-40a3-535d-be6e-521464a64a6d","excerpt":"Prisma 데이터 베이스 쿼리 및 ORM (Object-Relational-Mapping) 작업을 단순화 하고개발 생산성을 높이는데 도움을 주는 ORM 프레임워크다. 데이터 모델링, ORM 기능, 타입 안전성, 데이터베이스 마이그레이션, 쿼리 생성 등을 지원한다. 개발 생산성 향상, 타입 안전성, 다양한 데이터 베이스를 지원한다. Supabase 오픈소스 서버리스 백엔드 플랫폼으로, 데이터베이스, 인증, 스토리지등을 통합적으로 제공한다. 데이터베이스,사용자인증, 스토리지, 실시간 웹 소켓 등등의 기능을 제공한다. 빠른 개발과 실시간 데이터, 확장성, 오픈소스 등의 장점이있다. Prisma Supabase","fields":{"slug":"/etc/etc00/"},"frontmatter":{"categories":"etc","title":"Prisma,Supabase 간단 정리","date":"February 22, 2024"}},"next":{"fields":{"slug":"/NextJs/Nextjs01/"}},"previous":null},{"node":{"id":"321e99bb-8b82-58dd-b23d-8527facb5bbd","excerpt":"CSR 클라이언트 사이드 렌더링 (CSR): 클라이언트 측에서 페이지 렌더링을 수행하는 방식이다. 사용자의 브라우저에서 Javascript를 사용해 페이지를 동적으로 생성해준다. 서버는 빈 HTML 페이지만 제공하고 이후 데이터와 페이지를 렌더링하는 역할은 클라이언트가 수행한다. 작동방식 사용자가 새로운 사이트를 요청하면, 서버에서 빈 HTML 파일을 제공해주고, 브라우저가 JS파일을 다운로드한다. 이후 브라우저가 JS실행을 함 SSR 서버 사이드 렌더링(SSR): 서버에서 페이지를 미리 생성한뒤, 사용자에게 페이지를 렌더링 하는 방식 사용자가 페이지에 접속할 때 서버에서 미리 HTML을 생성하고 클라이언트로 보낸다. 사용자에게 초기 내용을 빠르게 표시하고 검색 엔진 최적화(SEO)를 개선하는데 도움을 준다. 작동방식 사용자가 새로운 사이트를 요청한다. 서버에서 미리 생성된 HTML 파일을 제공함 브라우저가 JS파일을 다운로드하면 브라우저가 JS를 실행한다. SSG 정적 사이트 생…","fields":{"slug":"/etc/etc01/"},"frontmatter":{"categories":"etc","title":"CSR - SSR - SSG 이해하기","date":"February 22, 2024"}},"next":{"fields":{"slug":"/etc/etc02/"}},"previous":{"fields":{"slug":"/NextJs/Nextjs01/"}}},{"node":{"id":"c43029bc-8b84-570f-b94e-23cbc46f0815","excerpt":"Tailwind 재사용하기 이렇게  키워드를 이용해서 설정후 이렇게 사용해줄 수 있다. Adding Custom Styles 파일을 통해서 사용자 정의 스타일 및 커스텀 클래스를 추가 할 수 있다. 이제 bg-blue를 사용해주면 기존 tailwind 색상이아닌,색상으로 나오게된다. Functions & Directives Tailwind의 함수와 디렉티브 사용으로 Tailwind를 더욱 확장성있게 사용할 수 있고, 커스텀마이징 할 수있다.\r\n Functions theme(): 테마 값을 동적으로 읽음 screen(): 미디어쿼리를 동적으로 생성할 수 있음 Directives  디렉티브를 사용해서 조건에 따라 요소의 스타일을 조절할 수 있다. @tailwind: HTML 요소에 Tailwind CSS클래스를 동적으로 추가 가능하다. @layer: CSS 규칙을 레이어별로 구성할 수 있게 해준다. @apply: CSS클래스를 동적으로 적용할 수 있다. @config: Tailwind…","fields":{"slug":"/etc/etc02/"},"frontmatter":{"categories":"etc","title":"Tailwind","date":"February 22, 2024"}},"next":{"fields":{"slug":"/NextJs/Nextjs00/"}},"previous":{"fields":{"slug":"/etc/etc01/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}