{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/nest.js","result":{"pageContext":{"currentCategory":"nest.js","categories":["All","nest.js","aws","prisma","Supabase","next.js","etc","css","React","stepByStep","javascript","vue","TIL","mui"],"edges":[{"node":{"id":"91f1d11c-29ec-5e79-a453-06a3ddab84d7","excerpt":"모델 정의 스키마 정의라고 생각함 게시물을 생성한다고 했을때, 게시물에 필요한 데이터가 어떤것이 필요한지를 정의해주기 위해서 게시물의 모델을 만들어줘야한다.\r\n예를들면 ID, 이름, 설명 등등.. board.model.ts를 생성한다. 모델 정의할 때 다음 두가지로 정의해 줄 수 있다. interface정의 : 변수의 타입만을 정의한다. classes정의 : 변수의 타입도 체크하고 인스턴스 또한 생성할 수 있다. 다음은 interface로 정의하는 예시임 /board/board.modal.ts enum은 타입스크립트 열거형 방식으로 PUBLIC과 PRIVATE 둘중 하나만 오게끔 하기위해서 사용해줬다. 이렇게 정의된 모델은 boards.service.ts 파일에서 사용이 가능하다 컨트롤러에 있는 코드에도 Board모델 타입을 정의해 줄 수 있다. 모델 정의 모델 정의할 때","fields":{"slug":"/Nestjs/nest04/"},"frontmatter":{"categories":"nest.js","title":"Modal 정의하기","date":"February 27, 2024"}},"next":{"fields":{"slug":"/Nestjs/nest03/"}},"previous":null},{"node":{"id":"e4b4025c-b121-5156-8123-94b32bb14986","excerpt":"Providers란? 프로바이더는 Nest의 기본개념이다.\r\n대부분의 기본 Nest 클래스는 서비스(Service), 레파지토리, 팩토리, 헬퍼등의 프로바이더로 취급될 수 있다.\r\n프로바이더의 주요 아이디어는 할 수 있다는 점이다.\r\n즉 객체는 서로 다양한 관계를 만들 수 있다는 것을 의미한다.\r\n객체의 인스턴스를 연결하는 기능은 대부분 Nest 런타임 시스템에 위임될 수 있다. 여기까지가 Nest의 공식 문서에 나와있는 내용이다. 즉, 사진속 컨트롤A안에 모든걸 구현할 수 없으니(코드양이 많아지니깐) 서비스A,서비스B,서비스C로 나누고 컨트롤러 A에 넣는 을 사용한다. 여기선 서비스를 예시로 두었지만, 레포지토리, 팩토리, 헬퍼 등도 취급될 수 있다. Service란? 서비스는 소프트웨어 개발내의 공통 개념이며, NestJS, Javascript에서만 쓰이는 개념이 아님  데코레이터로 감싸져서 모듈에 제공되며, 이 서비스 인스턴스는 애플리케이션 전체에서 사용 될 수 있다. 서비스…","fields":{"slug":"/Nestjs/nest03/"},"frontmatter":{"categories":"nest.js","title":"NestJS Providers, Service","date":"February 27, 2024"}},"next":{"fields":{"slug":"/Nestjs/nest02/"}},"previous":{"fields":{"slug":"/Nestjs/nest04/"}}},{"node":{"id":"9ecb0875-a346-599b-934e-aa3a020b6fb4","excerpt":"Controller란? 컨트롤러는 들어오는 요청을 처리하고 클라이언트에 응답을 반환하는 로직을 뜻한다. 컨트롤러는  데코레이터로 클래스를 데코레이션 하여 정의한다. Handler란? 핸들러는 @Get, @Post, @Delete 등과 같은 데코레이터로 장식 된 컨트롤러 클래스 내의 단순한 메서드를 칭한다. Board Controller 생성하기 *부분은 컨트롤러의 이름을 명시해준것\r\n—no-spec는 test파일을 생성하지 않는것을 명시해준것인데, 원래는 생성을해준다.  위의 명령어를 입력하면 자동으로 Board Module에 컨트롤러를 연결시켜준다 CLI로 명령어 입력시 순서 즉 CLI로(nest g …) 입력시 다음과 같은 순서로 만들어진다. cli는 먼저 boards라는 폴더를 찾는다. boards폴더 안에 controller파일을 생성한다. boards폴더 안에 modules 파일을 찾는다. modules 파일 안에 controller을 등록해준다. Controller란? …","fields":{"slug":"/Nestjs/nest02/"},"frontmatter":{"categories":"nest.js","title":"NestJS Controller","date":"February 27, 2024"}},"next":{"fields":{"slug":"/Nestjs/nest01/"}},"previous":{"fields":{"slug":"/Nestjs/nest03/"}}},{"node":{"id":"df0dc2b6-765d-5c31-82f1-67a5235fc385","excerpt":"Nest JS 모듈이란? NestJS에서 모듈이란, 어플리케이션을 구성하는 빌딩 블록을 뜻하며, 각각의 모듈을 모아 어플리케이션을 실행하고,\r\nController, Service등을 묶어 하나의 단위로 구성하여 애플리케이션의 구조를 모듈화한다. 모듈은 @Module() 데코레이터가 달린 클래스이다.\r\n@Module() 데코레이터는 NestJS가 애플리케이션 구조를 구성하는데 사용하는 를 제공해주는 역할을 해주고,\r\n각 응용 프로그램엔 하나 이상의 모듈(루트 모듈)이 있다.\r\n(루트 모듈은 Nest가 사용하는 시작점임) 모듈은.. 모듈은 밀접하게 관련된 기능 집합으로 구성 요소를 구성하는 효과적인 방법이다. 같은 기능에 해당하는 것들은 하나의 모듈 폴더에 넣어서 사용한다.\r\n(예를들면, UserService,UserEntity 다 같은 기능이라 UserModule안에 넣음)\r\n 모듈은 기본적으로 싱글 톤이므로 여러 모듈간에 쉽게 공급자의 동일한 인스턴스를 공유 할 수 있다. 모듈 생…","fields":{"slug":"/Nestjs/nest01/"},"frontmatter":{"categories":"nest.js","title":"NestJS 모듈","date":"February 27, 2024"}},"next":{"fields":{"slug":"/Nestjs/nest00/"}},"previous":{"fields":{"slug":"/Nestjs/nest02/"}}},{"node":{"id":"1b137880-6e67-5287-8a4f-e8d879ac2e2f","excerpt":"Nest란? 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기위한 프레임 워크라고한다. 자바스크립트를 사용하고, 타입스크립트로 빌드되고 완벽하게 지원하기까지 한다. express를 토대로 만들어졌다. 확장성이 좋다. 시작 NestJS를 이용해서 프로젝트를 시작할 때 Nest CLI를 이용하면 간단하게 프로젝트를 시작할 수 있다고한다. 아래의 명령어를 입력하면,\r\n새 플젝 디렉터리가 생성되고 초기 핵심 Nest 파일 및 지원 모듈로 디렉터리가 채워져 프로젝트의 기본 구조가 생성이된다. Nest란? 시작","fields":{"slug":"/Nestjs/nest00/"},"frontmatter":{"categories":"nest.js","title":"Nest 첫 시작","date":"February 27, 2024"}},"next":{"fields":{"slug":"/aws/aws03/"}},"previous":{"fields":{"slug":"/Nestjs/nest01/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}